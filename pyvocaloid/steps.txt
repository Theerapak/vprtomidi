	splash.Message = "Initializing modules (VDM) ...";
	Action<VDMError> action1 = (Action<VDMError>) (error =>
      {
        if (error == VDMError.VoiceBankNotFound)
        {
          int num1 = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.VerifyLicense_NoVoice);
        }
        else
        {
          int num2 = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_DatabaseManagerInitialization_Error);
        }
      });
      VDMError result1 = ~VDMError.None;
      App.DatabaseManager = DatabaseManagerIF.CreateDatabaseManager("voc5", ref result1);
      if (App.DatabaseManager == null || result1 != VDMError.None)
      {
        action1(result1);
        return App.ModuleResult.Fail;
      }
      splash.Message = "Initializing modules (DSE) ...";
      App.DSEManager = DSEManagerIF.CreateManager(App.DatabaseManager);
      if (App.DSEManager == null)
      {
        int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_DSEManagerInitialization_Error);
        return App.ModuleResult.Fail;
      }
      Func<bool> func1 = (Func<bool>) (() =>
      {
        for (ulong index = 0; index < App.DatabaseManager.NumDvqmDBs; ++index)
        {
          DvqmDB dvqmDbByIndex = App.DatabaseManager.GetDvqmDBByIndex(index);
          if (dvqmDbByIndex != null && !(dvqmDbByIndex.CompID != "BLNSLM55N4XN3LFK"))
            return 0 <= dvqmDbByIndex.ID;
        }
        return false;
      });
      Func<bool> func2;
      if (!func2())
      {
        int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_DSEManagerInitialization_Error);
        return App.ModuleResult.Fail;
      }
      LicenseResult licenseResult = LicenseResult.Undefined;
      bool flag2 = false;
      List<Yamaha.VOCALOID.DSE.License> licenseList = new List<Yamaha.VOCALOID.DSE.License>();
      foreach (Yamaha.VOCALOID.DSE.License license in App.DSEManager.GetLicenses())
      {
        switch (license.CompType)
        {
          case Yamaha.VOCALOID.DSE.License.Type.Application:
            string str = "BWMZBX5ALBWWZWEB";
            if (license.CompID == str)
            {
              licenseResult = license.Result;
              continue;
            }
            continue;
          case Yamaha.VOCALOID.DSE.License.Type.Voice:
            flag2 = true;
            switch (license.Result)
            {
              case LicenseResult.ValidExpiryKey:
              case LicenseResult.NoError:
                continue;
              default:
                if (5 <= license.CompVersion.Major)
                {
                  licenseList.Add(license);
                  continue;
                }
                continue;
            }
          default:
            continue;
        }
      }
      Action action2 = (Action) (() =>
      {
        ProcessStartInfo startInfo = new ProcessStartInfo(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\VOCALOID5\\Authorizer\\VOCALOID Authorizer.exe");
        try
        {
          Process.Start(startInfo);
        }
        catch
        {
          int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.VerifyLicense_FailedLaunchAuthorizer);
        }
      });
      switch (licenseResult)
      {
        case LicenseResult.Trial:
          string licenseEditorTrial = Resources.VerifyLicense_EditorTrial;
          if (MessageBoxDeliverer.GeneralYesNoQuestion((Window) splash, licenseEditorTrial) == MessageBoxResult.Yes)
          {
            action2();
            return App.ModuleResult.AuthorizationFail;
          }
          goto case LicenseResult.ValidExpiryKey;
        case LicenseResult.ValidExpiryKey:
        case LicenseResult.NoError:
          if (!flag2)
          {
            string verifyLicenseNoVoice = Resources.VerifyLicense_NoVoice;
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, verifyLicenseNoVoice);
            return App.ModuleResult.AuthorizationFail;
          }
          if (0 < licenseList.Count)
          {
            string str = Resources.VerifyLicense_VoiceNotAuthorized + "\n\n";
            for (int index = 0; index < licenseList.Count; ++index)
            {
              if (5 <= index)
              {
                string licenseRemaining = Resources.VerifyLicense_Remaining;
                str = str + string.Format(licenseRemaining, (object) (licenseList.Count - index)) + "\n";
                break;
              }
              str = str + "- " + licenseList[index].CompName + "\n";
            }
            string message = str + "\n" + Resources.VerifyLicense_EnterSerialNumber;
            if (MessageBoxDeliverer.GeneralYesNoQuestion((Window) splash, message) == MessageBoxResult.Yes)
            {
              action2();
              return App.ModuleResult.AuthorizationFail;
            }
          }
          splash.Message = "Initializing modules (VSM) ...";
          App.DoEvents();
          App.SequenceManager = WVSMModuleIF.CreateManager("voc5");
          if (App.SequenceManager == null)
          {
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_VSMInitialization_Error);
            return App.ModuleResult.Fail;
          }
          App.SequenceManager.SetDatabaseManager(App.DatabaseManager);
          App.SequenceManager.SetDSEManager(App.DSEManager);
          splash.Message = "Initializing modules (VSStyle) ...";
          App.DoEvents();
          if (!Directory.Exists(FolderLocation.PathUserStylePreset))
            Directory.CreateDirectory(FolderLocation.PathUserStylePreset);
          VSStyleError result2 = ~VSStyleError.None;
          App.StyleManager = StyleManagerIF.CreateStyleManager("voc5", FolderLocation.PathSystemStylePreset, FolderLocation.PathUserStylePreset, out result2);
          if (App.StyleManager == null || result2 != VSStyleError.None)
          {
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_StyleManagerInitialization_Error);
            return App.ModuleResult.Fail;
          }
          splash.Message = "Initializing modules (VMM) ...";
          App.DoEvents();
          if (!Directory.Exists(FolderLocation.PathUserMedia))
            Directory.CreateDirectory(FolderLocation.PathUserMedia);
          VMMError result3 = ~VMMError.None;
          App.MediaManager = MediaManagerIF.CreateMediaManager("voc5", FolderLocation.PathSystemMedia, FolderLocation.PathUserMedia, ref result3);
          if (App.MediaManager == null || result3 != VMMError.None)
          {
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_MediaManagerInitialization_Error);
            return App.ModuleResult.Fail;
          }
          if (!this.InitializeLuaController())
          {
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_LuaControllerInitialization_Error);
            return App.ModuleResult.Fail;
          }
          try
          {
            App.LuaManager = new LuaManager();
          }
          catch (ApplicationException ex)
          {
            AppLog.Write(ex.Message, "c:\\JenkinsSlaveJNLP\\workspace\\V5\\refs\\heads\\release\\5.0.2\\vocaloid5win\\VOCALOIDEditor\\App.cs", 641, nameof (InitializeModule));
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_LuaManagerInitialization_Error);
            return App.ModuleResult.Fail;
          }
          if (App.LuaManager == null)
          {
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_LuaManagerInitialization_Error);
            return App.ModuleResult.Fail;
          }
          if (!App.LuaManager.HasDefaultSingingSkillFiles())
          {
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_SingingSkill_DefaultSingingSkillNull);
            return App.ModuleResult.Fail;
          }
          if (!App.LuaManager.HasRobotVoiceLuaFiles())
          {
            int num = (int) MessageBoxDeliverer.GeneralError((Window) splash, Resources.MsgBox_RobotVoice_RobotVoicesNull);
            return App.ModuleResult.Fail;
          }
          if (VSGMain.readContentCheckOnLaunching() & flag1 && App.DRPs.Count != 0)
          {
            splash.Message = "Checking for contents update ...";
            App.DoEvents();
            new VSGContentsManager(UserFileContents.shared().contentsList, App.GetVCSLangFromCurrentCulture(), App.DeviceID, App.DictComponent).executeContentsCheck(VSGContentsManager.CheckType.launch, App.DRPs, (Window) splash, (Action<bool, Dictionary<string, bool>>) ((needResetup, list) =>
            {
              if (list == null)
                return;
              UserFileContents.shared().contentsList = list;
              UserFileContents.shared().save();
            }));
          }
          splash.Message = "Loading style files ...";
          App.DoEvents();
          this.LoadStyle();
          splash.Message = "Loading phrase files ...";
          App.DoEvents();
          this.LoadMedia();
          App.DoEvents();
          Thread.Sleep(500);
          return App.ModuleResult.Success;
        default:
          string editorNotAuthorized = Resources.VerifyLicense_EditorNotAuthorized;
          int num3 = (int) MessageBoxDeliverer.GeneralError((Window) splash, editorNotAuthorized);
          action2();
          return App.ModuleResult.AuthorizationFail;
      }